Description:
  This template deploys a VPC for OTT PROD

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: AA-OTT-VPC-PRD

  myKeyPair: 
    Description: Amazon EC2 Key Pair
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: AA-TEST-W2

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.140.160.0/19

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for 176-MGMT-A
    Type: String
    Default: 10.140.176.0/24
  
  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for 177-PRD-B
    Type: String
    Default: 10.140.177.0/24

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t1.micro
    - t2.micro
    - m1.small
    - m1.medium

Mappings: 
 RegionMap: 
  "us-east-1": 
   AMI: "ami-0fba9b33b5304d8b4"
  "us-east-2": 
   AMI: "ami-0e04554247365d806"
  "us-west-1": 
   AMI: "ami-0ad16744583f21877"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} PrivateRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export: 
      Name: 
        "Fn::Sub": "${AWS::StackName}-VPC"

  PrivateRouteTable:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PrivateRouteTable
    Export: 
      Name: 
        "Fn::Sub": "${AWS::StackName}-PrivateRouteTable"

  PrivateSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export: 
      Name: 
        "Fn::Sub": "${AWS::StackName}-PrivateSubnet1"

  PrivateSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export: 
      Name: 
        "Fn::Sub": "${AWS::StackName}-PrivateSubnet2"

  VpcCIDR:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref VpcCIDR
    Export: 
      Name: 
        "Fn::Sub": "${AWS::StackName}-VpcCIDR"